# This is same as get.txt except that we use the -vcs flag on gohack get with a
# relative GOHACK set. Until we can figure out better, this requires access to
# the network.

[!net] skip
[!exec:git] skip
env GOPROXY=

cd repo/dummy
go get rsc.io/quote@v1.5.2
env GOHACK=.
gohack get -vcs rsc.io/quote
stdout '^rsc.io/quote => \./rsc.io/quote$'
! stderr .+

# move back to the module root
cd ..

# Check that the replace statement is there.
grep -count=1 '^replace rsc\.io/quote => \./rsc.io/quote$' go.mod

# Check that it's a git repository
exists ./rsc.io/quote/.git

# Check that the source files have been copied.
exists ./rsc.io/quote/quote.go

# Check that we can compile the command OK.
go install example.com/repo

-- repo/main.go --

package main
import (
	"fmt"
	"rsc.io/quote"
)

func main() {
	fmt.Println(quote.Glass())
}

-- repo/dummy/file --

// This dummy file exists in order to create the dummy
// directory so that the gohack command can be run from
// within the dummy directory

-- repo/go.mod --
module example.com/repo

-- bogus.go --

package wrong
